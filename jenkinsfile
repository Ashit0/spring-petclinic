pipeline{
    agent{
        label 'JDK_17'
    }
    triggers{ pollSCM( '* * * * *') }
    stages{
        stage('vcs'){
            steps{
            git url: 'https://github.com/Ashit0/spring-petclinic.git',
                branch: 'release'
            } 
        } 
        stage('Post build'){
            steps{
                archiveArtifacts artifacts: '**/target/spring-petclinic-3.0.0-SNAPSHOT.jar',
                                 onlyIfSuccessful:true
                junit testResults: '**/surefire-reports/TEST-*.xml'                 
            }

        }
        stage('Sonar analysis'){
            steps{
                withSonarQubeEnv('SONAR_CLOUD'){
                    sh './mvnw clean package sonar:sonar \
                        -Dsonar.login=c45d5483f45a3dd0809ee3a87af7c32c1349cc6e \
                       -Dsonar.host.url=https://sonarcloud.io \
                        -Dsonar.organization=ashit \
                         -Dsonar.projectKey=ashit_ashit-project'
                }
            }
        }
       stage ('Artifactory configuration') {
            steps {
                rtServer (
                    id: "ARTIFACTORY_SERVER",
                    url: 'https://ashit.jfrog.io/artifactory',
                    credentialsId: 'Jfrog'
                )

                rtMavenDeployer (
                    id: "MAVEN_DEPLOYER",
                    serverId: "ARTIFACTORY_SERVER",
                    releaseRepo: 'libs-release',
                    snapshotRepo: 'libs-snapshot'
                )

                rtMavenResolver (
                    id: "MAVEN_RESOLVER",
                    serverId: "ARTIFACTORY_SERVER",
                    releaseRepo: 'libs-release',
                    snapshotRepo: 'libs-snapshot'
                )
            }
        }
        stage('package') {
           // tools {
             //   jdk 'JDK_17'
            //}
            steps {
                rtMavenRun (
                    tool: 'MAVEN_DEFAULT',
                    pom: 'pom.xml',
                    goals: 'clean install',
                    deployerId: "MAVEN_DEPLOYER"
                    
                )
                rtPublishBuildInfo (
                    serverId: "ARTIFACTORY_SERVER"
                )
                //sh "mvn ${params.MAVEN_GOAL}"
            }
        }
        
    }

}